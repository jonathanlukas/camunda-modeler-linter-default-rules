{"version":3,"file":"client.js","mappingsnlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjIA;AACA;AACA;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpv2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://camunda-modeler-custom-linter-rules-plugin/./.bpmnlintrc","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint-plugin-camunda/rules/avoid-lanes.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint-plugin-camunda/rules/forking-conditions.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint-plugin-camunda/rules/implementation.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/conditional-flows.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/end-event-required.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/event-sub-process-typed-start-event.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/fake-join.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/helper.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/label-required.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-bpmndi.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-complex-gateway.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-disconnected.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-duplicate-sequence-flows.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-gateway-join-fork.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-implicit-end.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-implicit-split.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-implicit-start.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/no-inclusive-gateway.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/single-blank-start-event.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/single-event-definition.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/start-event-required.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/sub-process-blank-start-event.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint/rules/superfluous-gateway.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/camunda-modeler-plugin-helpers/index.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/bpmnlint-utils/dist/index.esm.js","webpack://camunda-modeler-custom-linter-rules-plugin/./node_modules/min-dash/dist/index.esm.js","webpack://camunda-modeler-custom-linter-rules-plugin/webpack/bootstrap","webpack://camunda-modeler-custom-linter-rules-plugin/webpack/runtime/compat get default export","webpack://camunda-modeler-custom-linter-rules-plugin/webpack/runtime/define property getters","webpack://camunda-modeler-custom-linter-rules-plugin/webpack/runtime/hasOwnProperty shorthand","webpack://camunda-modeler-custom-linter-rules-plugin/webpack/runtime/make namespace object","webpack://camunda-modeler-custom-linter-rules-plugin/./client/index.js"],"sourcesContent":["\nconst cache = {};\n\n/**\n * A resolver that caches rules and configuration as part of the bundle,\n * making them accessible in the browser.\n *\n * @param {Object} cache\n */\nfunction Resolver() {}\n\nResolver.prototype.resolveRule = function(pkg, ruleName) {\n\n  const rule = cache[pkg + '/' + ruleName];\n\n  if (!rule) {\n    throw new Error('cannot resolve rule <' + pkg + '/' + ruleName + '>: not bundled');\n  }\n\n  return rule;\n};\n\nResolver.prototype.resolveConfig = function(pkg, configName) {\n  throw new Error(\n    'cannot resolve config <' + configName + '> in <' + pkg +'>: not bundled'\n  );\n};\n\nconst resolver = new Resolver();\n\nconst rules = {\n  \"conditional-flows\": \"error\",\n  \"end-event-required\": \"error\",\n  \"event-sub-process-typed-start-event\": \"error\",\n  \"fake-join\": \"warn\",\n  \"label-required\": \"error\",\n  \"no-bpmndi\": \"error\",\n  \"no-complex-gateway\": \"error\",\n  \"no-disconnected\": \"error\",\n  \"no-duplicate-sequence-flows\": \"error\",\n  \"no-gateway-join-fork\": \"error\",\n  \"no-implicit-split\": \"error\",\n  \"no-implicit-end\": \"error\",\n  \"no-implicit-start\": \"error\",\n  \"no-inclusive-gateway\": \"error\",\n  \"single-blank-start-event\": \"error\",\n  \"single-event-definition\": \"error\",\n  \"start-event-required\": \"error\",\n  \"sub-process-blank-start-event\": \"error\",\n  \"superfluous-gateway\": \"warn\",\n  \"camunda/avoid-lanes\": \"warn\",\n  \"camunda/forking-conditions\": \"error\",\n  \"camunda/implementation\": \"warning\"\n};\n\nconst config = {\n  rules: rules\n};\n\nconst bundle = {\n  resolver: resolver,\n  config: config\n};\n\nexport { resolver, config };\n\nexport default bundle;\n\nimport rule_0 from 'bpmnlint/rules/conditional-flows';\n\ncache['bpmnlint/conditional-flows'] = rule_0;\n\nimport rule_1 from 'bpmnlint/rules/end-event-required';\n\ncache['bpmnlint/end-event-required'] = rule_1;\n\nimport rule_2 from 'bpmnlint/rules/event-sub-process-typed-start-event';\n\ncache['bpmnlint/event-sub-process-typed-start-event'] = rule_2;\n\nimport rule_3 from 'bpmnlint/rules/fake-join';\n\ncache['bpmnlint/fake-join'] = rule_3;\n\nimport rule_4 from 'bpmnlint/rules/label-required';\n\ncache['bpmnlint/label-required'] = rule_4;\n\nimport rule_5 from 'bpmnlint/rules/no-bpmndi';\n\ncache['bpmnlint/no-bpmndi'] = rule_5;\n\nimport rule_6 from 'bpmnlint/rules/no-complex-gateway';\n\ncache['bpmnlint/no-complex-gateway'] = rule_6;\n\nimport rule_7 from 'bpmnlint/rules/no-disconnected';\n\ncache['bpmnlint/no-disconnected'] = rule_7;\n\nimport rule_8 from 'bpmnlint/rules/no-duplicate-sequence-flows';\n\ncache['bpmnlint/no-duplicate-sequence-flows'] = rule_8;\n\nimport rule_9 from 'bpmnlint/rules/no-gateway-join-fork';\n\ncache['bpmnlint/no-gateway-join-fork'] = rule_9;\n\nimport rule_10 from 'bpmnlint/rules/no-implicit-split';\n\ncache['bpmnlint/no-implicit-split'] = rule_10;\n\nimport rule_11 from 'bpmnlint/rules/no-implicit-end';\n\ncache['bpmnlint/no-implicit-end'] = rule_11;\n\nimport rule_12 from 'bpmnlint/rules/no-implicit-start';\n\ncache['bpmnlint/no-implicit-start'] = rule_12;\n\nimport rule_13 from 'bpmnlint/rules/no-inclusive-gateway';\n\ncache['bpmnlint/no-inclusive-gateway'] = rule_13;\n\nimport rule_14 from 'bpmnlint/rules/single-blank-start-event';\n\ncache['bpmnlint/single-blank-start-event'] = rule_14;\n\nimport rule_15 from 'bpmnlint/rules/single-event-definition';\n\ncache['bpmnlint/single-event-definition'] = rule_15;\n\nimport rule_16 from 'bpmnlint/rules/start-event-required';\n\ncache['bpmnlint/start-event-required'] = rule_16;\n\nimport rule_17 from 'bpmnlint/rules/sub-process-blank-start-event';\n\ncache['bpmnlint/sub-process-blank-start-event'] = rule_17;\n\nimport rule_18 from 'bpmnlint/rules/superfluous-gateway';\n\ncache['bpmnlint/superfluous-gateway'] = rule_18;\n\nimport rule_19 from 'bpmnlint-plugin-camunda/rules/avoid-lanes';\n\ncache['bpmnlint-plugin-camunda/avoid-lanes'] = rule_19;\n\nimport rule_20 from 'bpmnlint-plugin-camunda/rules/forking-conditions';\n\ncache['bpmnlint-plugin-camunda/forking-conditions'] = rule_20;\n\nimport rule_21 from 'bpmnlint-plugin-camunda/rules/implementation';\n\ncache['bpmnlint-plugin-camunda/implementation'] = rule_21;","const {\n  is\n} = require('bpmnlint-utils');\n\n\n/**\n * Rule that reports the usage of lanes.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n    if (is(node, 'bpmn:Lane')) {\n      reporter.report(node.id, 'lanes should be avoided');\n    }\n  }\n\n  return {\n    check: check\n  };\n};\n","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * A rule that checks that sequence flows after\n * an exclusive forking gateway have conditions\n * attached.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    const outgoing = node.outgoing || [];\n\n    if (!is(node, 'bpmn:ExclusiveGateway') || outgoing.length < 2) {\n      return;\n    }\n\n    outgoing.forEach((flow) => {\n      const missingCondition = (\n        !hasCondition(flow) &&\n        !isDefaultFlow(node, flow)\n      );\n\n      if (missingCondition) {\n        reporter.report(flow.id, 'Sequence flow is missing condition');\n      }\n    });\n  }\n\n  return {\n    check\n  };\n\n};\n\n\n// helpers /////////////////////////////\n\nfunction hasCondition(flow) {\n  return !!flow.conditionExpression;\n}\n\nfunction isDefaultFlow(node, flow) {\n  return node['default'] === flow;\n}","const {\n  is\n} = require('bpmnlint-utils');\n\nconst implementationAttributes = [\n  'camunda:expression',\n  'camunda:delegateExpression',\n  'camunda:class',\n  'camunda:type'\n];\n\n/**\n * Rule that reports the usage of collapsed sub-processes.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n    if (is(node, 'camunda:ServiceTaskLike')) {\n\n      const process = findNodeProcess(node);\n\n      if (!process || !process.get('isExecutable')) {\n        return;\n      }\n\n      if (\n        hasConnector(node) ||\n        hasAnyAttribute(node, implementationAttributes)\n      ) {\n        return;\n      }\n\n      if (is(node, 'bpmn:BusinessRuleTask') && hasAttribute(node, 'camunda:decisionRef')) {\n        return;\n      }\n\n      reporter.report(node.id, 'Implementation is missing');\n    }\n  }\n\n  return {\n    check: check\n  };\n};\n\nfunction findNodeProcess(node) {\n  let parent = node.$parent;\n\n  while (parent && !is(parent, 'bpmn:Process')) {\n    parent = parent.$parent;\n  }\n\n  return parent;\n}\n\nfunction hasConnector(bpmnElement) {\n  const extensionElements = bpmnElement.get('extensionElements');\n\n  if (!extensionElements) {\n    return false;\n  }\n\n  return extensionElements.get('values').some(function(extension) {\n    return is(extension, 'camunda:Connector');\n  });\n}\n\nfunction hasAnyAttribute(bpmnElement, attributes) {\n  return attributes.some(function(attribute) {\n    return hasAttribute(bpmnElement, attribute);\n  });\n}\n\nfunction hasAttribute(bpmnElement, attribute) {\n  return bpmnElement.get(attribute) !== undefined;\n}\n","/**\n * A rule that checks that sequence flows outgoing from a\n * conditional forking gateway or activity are\n * either default flows _or_ have a condition attached\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!isConditionalForking(node)) {\n      return;\n    }\n\n    const outgoing = node.outgoing || [];\n\n    outgoing.forEach((flow) => {\n      const missingCondition = (\n        !hasCondition(flow) &&\n        !isDefaultFlow(node, flow)\n      );\n\n      if (missingCondition) {\n        reporter.report(flow.id, 'Sequence flow is missing condition', [ 'conditionExpression' ]);\n      }\n    });\n  }\n\n  return {\n    check\n  };\n\n};\n\n\n// helpers /////////////////////////////\n\nfunction isConditionalForking(node) {\n\n  const defaultFlow = node['default'];\n  const outgoing = node.outgoing || [];\n\n  return defaultFlow || outgoing.find(hasCondition);\n}\n\nfunction hasCondition(flow) {\n  return !!flow.conditionExpression;\n}\n\nfunction isDefaultFlow(node, flow) {\n  return node['default'] === flow;\n}","const {\n  is,\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks the presence of an end event per scope.\n */\nmodule.exports = function() {\n\n  function hasEndEvent(node) {\n    const flowElements = node.flowElements || [];\n\n    return (\n      flowElements.some(node => is(node, 'bpmn:EndEvent'))\n    );\n  }\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [\n      'bpmn:Process',\n      'bpmn:SubProcess'\n    ])) {\n      return;\n    }\n\n    if (!hasEndEvent(node)) {\n      const type = is(node, 'bpmn:SubProcess') ? 'Sub process' : 'Process';\n\n      reporter.report(node.id, type + ' is missing end event');\n    }\n  }\n\n  return { check };\n};\n","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * A rule that checks that start events inside an event sub-process\n * are typed.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:SubProcess') || !node.triggeredByEvent) {\n      return;\n    }\n\n    const flowElements = node.flowElements || [];\n\n    flowElements.forEach(function(flowElement) {\n\n      if (!is(flowElement, 'bpmn:StartEvent')) {\n        return false;\n      }\n\n      const eventDefinitions = flowElement.eventDefinitions || [];\n\n      if (eventDefinitions.length === 0) {\n        reporter.report(flowElement.id, 'Start event is missing event definition', [ 'eventDefinitions' ]);\n      }\n    });\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  isAny\n} = require('bpmnlint-utils');\n\n/**\n * A rule that checks that no fake join is modeled by attempting\n * to give a task or event join semantics.\n *\n * Users should model a parallel joining gateway\n * to achieve the desired behavior.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [\n      'bpmn:Task',\n      'bpmn:Event'\n    ])) {\n      return;\n    }\n\n    const incoming = node.incoming || [];\n\n    if (incoming.length > 1) {\n      reporter.report(node.id, 'Incoming flows do not join');\n    }\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * Create a checker that disallows the given element type.\n *\n * @param {String} type\n *\n * @return {Function} ruleImpl\n */\nfunction disallowNodeType(type) {\n\n  return function() {\n\n    function check(node, reporter) {\n\n      if (is(node, type)) {\n        reporter.report(node.id, 'Element has disallowed type <' + type + '>');\n      }\n    }\n\n    return {\n      check\n    };\n\n  };\n\n}\n\nmodule.exports.disallowNodeType = disallowNodeType;","const {\n  is,\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks the presence of a label.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (isAny(node, [\n      'bpmn:ParallelGateway',\n      'bpmn:EventBasedGateway'\n    ])) {\n      return;\n    }\n\n    // ignore joining gateways\n    if (is(node, 'bpmn:Gateway') && !isForking(node)) {\n      return;\n    }\n\n    if (is(node, 'bpmn:BoundaryEvent')) {\n      return;\n    }\n\n    // ignore sub-processes\n    if (is(node, 'bpmn:SubProcess')) {\n\n      // TODO(nikku): better ignore expanded sub-processes only\n      return;\n    }\n\n    // ignore sequence flow without condition\n    if (is(node, 'bpmn:SequenceFlow') && !hasCondition(node)) {\n      return;\n    }\n\n    // ignore data objects and artifacts for now\n    if (isAny(node, [\n      'bpmn:FlowNode',\n      'bpmn:SequenceFlow',\n      'bpmn:Participant',\n      'bpmn:Lane'\n    ])) {\n\n      const name = (node.name || '').trim();\n\n      if (name.length === 0) {\n        reporter.report(node.id, 'Element is missing label/name', [ 'name' ]);\n      }\n    }\n  }\n\n  return { check };\n};\n\n\n// helpers ////////////////////////\n\nfunction isForking(node) {\n  const outgoing = node.outgoing || [];\n\n  return outgoing.length > 1;\n}\n\nfunction hasCondition(node) {\n  return node.conditionExpression;\n}","const {\n  is\n} = require('bpmnlint-utils');\n\nconst {\n  flatten\n} = require('min-dash');\n\n/**\n * A rule that checks that there is no BPMNDI information missing for elements,\n * which require BPMNDI.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:Definitions')) {\n      return false;\n    }\n\n    // (1) Construct array of all BPMN elements\n    const bpmnElements = getAllBpmnElements(node.rootElements);\n\n    // (2) Filter BPMN elements without visual representation\n    const visualBpmnElements = bpmnElements.filter(hasVisualRepresentation);\n\n    // (3) Construct array of BPMNDI references\n    const diBpmnReferences = getAllDiBpmnReferences(node);\n\n    // (4) Report elements without BPMNDI\n    visualBpmnElements.forEach((element) => {\n      if (diBpmnReferences.indexOf(element.id) === -1) {\n        reporter.report(element.id, 'Element is missing bpmndi');\n      }\n    });\n  }\n\n  return {\n    check\n  };\n\n};\n\n\n// helpers /////////////////////////////\n\n/**\n * Get all BPMN elements within a bpmn:Definitions node\n *\n * @param {array<ModdleElement>} rootElements - An array of Moddle rootElements\n * @return {array<Object>} A flat array with all BPMN elements, each represented with { id: elementId, $type: elementType }\n *\n */\nfunction getAllBpmnElements(rootElements) {\n  return flatten(rootElements.map((rootElement) => {\n    const laneSet =\n      rootElement.laneSets && rootElement.laneSets[0] || rootElement.childLaneSet;\n\n    // Include\n    // * flowElements (e.g., tasks, sequenceFlows),\n    // * nested flowElements,\n    // * participants,\n    // * artifacts (groups),\n    // * laneSets\n    // * nested laneSets\n    // * childLaneSets\n    // * nested childLaneSets\n    // * messageFlows\n    const elements = flatten([].concat(\n      rootElement.flowElements || [],\n      (rootElement.flowElements && getAllBpmnElements(rootElement.flowElements.filter(hasFlowElements))) || [],\n      rootElement.participants || [],\n      rootElement.artifacts || [],\n      laneSet && laneSet.lanes || [],\n      laneSet && laneSet.lanes && getAllBpmnElements(laneSet.lanes.filter(hasChildLaneSet)) || [],\n      rootElement.messageFlows || []\n    ));\n\n    if (elements.length > 0) {\n      return elements.map((element) => {\n\n        return {\n          id: element.id,\n          $type: element.$type\n        };\n      });\n    } else {\n\n      // We are not interested in the rest here (DI)\n      return [];\n    }\n  }));\n}\n\n/**\n * Get all BPMN elements within a bpmn:Definitions node\n *\n * @param {ModdleElement} definitionsNode - A moddleElement representing the\n * bpmn:Definitions element\n * @return {array<String>} A flat array with all BPMNDI element ids part of\n * this bpmn:Definitions node\n *\n */\nfunction getAllDiBpmnReferences(definitionsNode) {\n  return flatten(\n    definitionsNode.diagrams.map((diagram) => {\n\n      const diElements = diagram.plane.planeElement || [];\n\n      return diElements.map((element) => {\n\n        return element.bpmnElement.id;\n      });\n    })\n  );\n}\n\nfunction hasVisualRepresentation(element) {\n  const noVisRepresentation = [ 'bpmn:DataObject' ];\n\n  return noVisRepresentation.includes(element.$type) ? false : true;\n}\n\nfunction hasFlowElements(element) {\n  return element.flowElements ? true : false;\n}\n\nfunction hasChildLaneSet(element) {\n  return element.childLaneSet ? true : false;\n}\n","const disallowNodeType = require('./helper').disallowNodeType;\n\nmodule.exports = disallowNodeType('bpmn:ComplexGateway');","const {\n  isAny,\n  is\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that verifies that there exists no disconnected\n * flow elements, i.e. elements without incoming\n * _or_ outgoing sequence flows\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [\n      'bpmn:Task',\n      'bpmn:Gateway',\n      'bpmn:SubProcess',\n      'bpmn:Event'\n    ]) || node.triggeredByEvent) {\n      return;\n    }\n\n    // compensation activity and boundary events are\n    // linked visually via associations. If these associations\n    // exist we are fine, too\n    if (isCompensationLinked(node)) {\n      return;\n    }\n\n    const incoming = node.incoming || [];\n    const outgoing = node.outgoing || [];\n\n    if (!incoming.length && !outgoing.length) {\n      reporter.report(node.id, 'Element is not connected');\n    }\n  }\n\n  return {\n    check\n  };\n};\n\n\n// helpers /////////////////\n\nfunction isCompensationBoundary(node) {\n\n  var eventDefinitions = node.eventDefinitions;\n\n  if (!is(node, 'bpmn:BoundaryEvent')) {\n    return false;\n  }\n\n  if (!eventDefinitions || eventDefinitions.length !== 1) {\n    return false;\n  }\n\n  return is(eventDefinitions[0], 'bpmn:CompensateEventDefinition');\n}\n\nfunction isCompensationActivity(node) {\n  return node.isForCompensation;\n}\n\nfunction isCompensationLinked(node) {\n  var source = isCompensationBoundary(node);\n  var target = isCompensationActivity(node);\n\n  // TODO(nikku): check, whether compensation association exists\n  return source || target;\n}","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * A rule that verifies that there are no disconnected\n * flow elements, i.e. elements without incoming\n * _or_ outgoing sequence flows\n */\nmodule.exports = function() {\n\n  const keyed = {};\n\n  const outgoingReported = {};\n  const incomingReported = {};\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:SequenceFlow')) {\n      return;\n    }\n\n    const key = flowKey(node);\n\n    if (key in keyed) {\n      reporter.report(node.id, 'SequenceFlow is a duplicate');\n\n      const sourceId = node.sourceRef.id;\n      const targetId = node.targetRef.id;\n\n      if (!outgoingReported[sourceId]) {\n        reporter.report(sourceId, 'Duplicate outgoing sequence flows');\n\n        outgoingReported[sourceId] = true;\n      }\n\n      if (!incomingReported[targetId]) {\n        reporter.report(targetId, 'Duplicate incoming sequence flows');\n\n        incomingReported[targetId] = true;\n      }\n    } else {\n      keyed[key] = node;\n    }\n  }\n\n  return {\n    check\n  };\n\n};\n\n\n// helpers /////////////////\n\nfunction flowKey(flow) {\n  const conditionExpression = flow.conditionExpression;\n\n  const condition = conditionExpression ? conditionExpression.body : '';\n  const source = flow.sourceRef ? flow.sourceRef.id : flow.id;\n  const target = flow.targetRef ? flow.targetRef.id : flow.id;\n\n  return source + '#' + target + '#' + condition;\n}","const {\n  is\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks, whether a gateway forks and joins\n * at the same time.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:Gateway')) {\n      return;\n    }\n\n    const incoming = node.incoming || [];\n    const outgoing = node.outgoing || [];\n\n    if (incoming.length > 1 && outgoing.length > 1) {\n      reporter.report(node.id, 'Gateway forks and joins');\n    }\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  is,\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks that an element is not an implicit end (token sink).\n */\nmodule.exports = function() {\n\n  function isImplicitEnd(node) {\n    const outgoing = node.outgoing || [];\n\n    return !is(node, 'bpmn:EndEvent') && outgoing.length === 0;\n  }\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [ 'bpmn:Event', 'bpmn:Activity', 'bpmn:Gateway' ])) {\n      return;\n    }\n\n    if (isImplicitEnd(node)) {\n      reporter.report(node.id, 'Element is an implicit end');\n    }\n  }\n\n  return { check };\n};\n","const {\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks that no implicit split is modeled\n * starting from a task.\n *\n * users should model the parallel splitting gateway\n * explicitly instead.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [\n      'bpmn:Task',\n      'bpmn:Event'\n    ])) {\n      return;\n    }\n\n    const outgoing = node.outgoing || [];\n\n    const outgoingWithoutCondition = outgoing.filter((flow) => {\n      return !hasCondition(flow) && !isDefaultFlow(node, flow);\n    });\n\n    if (outgoingWithoutCondition.length > 1) {\n      reporter.report(node.id, 'Flow splits implicitly');\n    }\n  }\n\n  return {\n    check\n  };\n\n};\n\n\n// helpers /////////////////////////////\n\nfunction hasCondition(flow) {\n  return !!flow.conditionExpression;\n}\n\nfunction isDefaultFlow(node, flow) {\n  return node['default'] === flow;\n}","const {\n  is,\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks that an element is not an implicit start (token spawn).\n */\nmodule.exports = function() {\n\n  function isImplicitStart(node) {\n    const incoming = node.incoming || [];\n\n    return !is(node, 'bpmn:StartEvent') && incoming.length === 0;\n  }\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [ 'bpmn:Event', 'bpmn:Activity', 'bpmn:Gateway' ])) {\n      return;\n    }\n\n    if (isImplicitStart(node)) {\n      reporter.report(node.id, 'Element is an implicit start');\n    }\n  }\n\n  return { check };\n};\n","const disallowNodeType = require('./helper').disallowNodeType;\n\nmodule.exports = disallowNodeType('bpmn:InclusiveGateway');","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * A rule that checks whether not more than one blank start event\n * exists per scope.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:FlowElementsContainer')) {\n      return;\n    }\n\n    const flowElements = node.flowElements || [];\n\n    const blankStartEvents = flowElements.filter(function(flowElement) {\n\n      if (!is(flowElement, 'bpmn:StartEvent')) {\n        return false;\n      }\n\n      const eventDefinitions = flowElement.eventDefinitions || [];\n\n      return eventDefinitions.length === 0;\n    });\n\n    if (blankStartEvents.length > 1) {\n      const type = is(node, 'bpmn:SubProcess') ? 'Sub process' : 'Process';\n\n      reporter.report(node.id, type + ' has multiple blank start events');\n    }\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  is\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that verifies that an event contains maximum one event definition.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:Event')) {\n      return;\n    }\n\n    const eventDefinitions = node.eventDefinitions || [];\n\n    if (eventDefinitions.length > 1) {\n      reporter.report(node.id, 'Event has multiple event definitions', [ 'eventDefinitions' ]);\n    }\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  is,\n  isAny\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks for the presence of a start event per scope.\n */\nmodule.exports = function() {\n\n  function hasStartEvent(node) {\n    const flowElements = node.flowElements || [];\n\n    return (\n      flowElements.some(node => is(node, 'bpmn:StartEvent'))\n    );\n  }\n\n  function check(node, reporter) {\n\n    if (!isAny(node, [\n      'bpmn:Process',\n      'bpmn:SubProcess'\n    ])) {\n      return;\n    }\n\n    if (!hasStartEvent(node)) {\n      const type = is(node, 'bpmn:SubProcess') ? 'Sub process' : 'Process';\n\n      reporter.report(node.id, type + ' is missing start event');\n    }\n  }\n\n  return { check };\n};\n","const {\n  is\n} = require('bpmnlint-utils');\n\n\n/**\n * A rule that checks that start events inside a normal sub-processes\n * are blank (do not have an event definition).\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:SubProcess') || node.triggeredByEvent) {\n      return;\n    }\n\n    const flowElements = node.flowElements || [];\n\n    flowElements.forEach(function(flowElement) {\n\n      if (!is(flowElement, 'bpmn:StartEvent')) {\n        return false;\n      }\n\n      const eventDefinitions = flowElement.eventDefinitions || [];\n\n      if (eventDefinitions.length > 0) {\n        reporter.report(flowElement.id, 'Start event must be blank', [ 'eventDefinitions' ]);\n      }\n    });\n  }\n\n  return {\n    check\n  };\n\n};","const {\n  is\n} = require('bpmnlint-utils');\n\n/**\n * A rule that checks, whether a gateway has only one source and target.\n *\n * Those gateways are superfluous since they don't do anything.\n */\nmodule.exports = function() {\n\n  function check(node, reporter) {\n\n    if (!is(node, 'bpmn:Gateway')) {\n      return;\n    }\n\n    const incoming = node.incoming || [];\n    const outgoing = node.outgoing || [];\n\n    if (incoming.length === 1 && outgoing.length === 1) {\n      reporter.report(node.id, 'Gateway is superfluous. It only has one source and target.');\n    }\n  }\n\n  return {\n    check\n  };\n\n};","/**\n * Validate and register a client plugin.\n *\n * @param {Object} plugin\n * @param {String} type\n */\nexport function registerClientPlugin(plugin, type) {\n  var plugins = window.plugins || [];\n  window.plugins = plugins;\n\n  if (!plugin) {\n    throw new Error('plugin not specified');\n  }\n\n  if (!type) {\n    throw new Error('type not specified');\n  }\n\n  plugins.push({\n    plugin: plugin,\n    type: type\n  });\n}\n\n/**\n * Validate and register a client plugin.\n *\n * @param {import('react').ComponentType} extension\n *\n * @example\n *\n * import MyExtensionComponent from './MyExtensionComponent';\n *\n * registerClientExtension(MyExtensionComponent);\n */\nexport function registerClientExtension(component) {\n  registerClientPlugin(component, 'client');\n}\n\n/**\n * Validate and register a bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.modeler.additionalModules');\n}\n\n/**\n * Validate and register a platform specific bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerPlatformBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerPlatformBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerPlatformBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.platform.modeler.additionalModules');\n}\n\n/**\n * Validate and register a cloud specific bpmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerCloudBpmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const BpmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerCloudBpmnJSPlugin(BpmnJSModule);\n */\nexport function registerCloudBpmnJSPlugin(module) {\n  registerClientPlugin(module, 'bpmn.cloud.modeler.additionalModules');\n}\n\n/**\n * Validate and register a bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a platform specific bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerPlatformBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerPlatformBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerPlatformBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.platform.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a cloud specific bpmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerCloudBpmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerCloudBpmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerCloudBpmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'bpmn.cloud.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a cloud specific dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerCloudDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerCloudDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerCloudDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.cloud.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a platform specific dmn-moddle extension plugin.\n *\n * @param {Object} descriptor\n *\n * @example\n * import {\n *   registerPlatformDmnJSModdleExtension\n * } from 'camunda-modeler-plugin-helpers';\n *\n * var moddleDescriptor = {\n *   name: 'my descriptor',\n *   uri: 'http://example.my.company.localhost/schema/my-descriptor/1.0',\n *   prefix: 'mydesc',\n *\n *   ...\n * };\n *\n * registerPlatformDmnJSModdleExtension(moddleDescriptor);\n */\nexport function registerPlatformDmnJSModdleExtension(descriptor) {\n  registerClientPlugin(descriptor, 'dmn.platform.modeler.moddleExtension');\n}\n\n/**\n * Validate and register a dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.modeler.${c}.additionalModules`));\n}\n\n/**\n * Validate and register a cloud specific dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerCloudDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerCloudDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerCloudDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerCloudDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.cloud.modeler.${c}.additionalModules`));\n}\n\n/**\n * Validate and register a platform specific dmn-js plugin.\n *\n * @param {Object} module\n *\n * @example\n *\n * import {\n *   registerPlatformDmnJSPlugin\n * } from 'camunda-modeler-plugin-helpers';\n *\n * const DmnJSModule = {\n *   __init__: [ 'myService' ],\n *   myService: [ 'type', ... ]\n * };\n *\n * registerPlatformDmnJSPlugin(DmnJSModule, [ 'drd', 'literalExpression' ]);\n * registerPlatformDmnJSPlugin(DmnJSModule, 'drd')\n */\nexport function registerPlatformDmnJSPlugin(module, components) {\n\n  if (!Array.isArray(components)) {\n    components = [ components ]\n  }\n\n  components.forEach(c => registerClientPlugin(module, `dmn.platform.modeler.${c}.additionalModules`));\n}\n\n/**\n * Return the modeler directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getModelerDirectory() {\n  return window.getModelerDirectory();\n}\n\n/**\n * Return the modeler plugin directory, as a string.\n *\n * @deprecated Will be removed in future Camunda Modeler versions without replacement.\n *\n * @return {String}\n */\nexport function getPluginsDirectory() {\n  return window.getPluginsDirectory();\n}","/**\n * Checks whether node is of specific bpmn type.\n *\n * @param {ModdleElement} node\n * @param {String} type\n *\n * @return {Boolean}\n */\nfunction is(node, type) {\n\n  if (type.indexOf(':') === -1) {\n    type = 'bpmn:' + type;\n  }\n\n  return (\n    (typeof node.$instanceOf === 'function')\n      ? node.$instanceOf(type)\n      : node.$type === type\n  );\n}\n\n/**\n * Checks whether node has any of the specified types.\n *\n * @param {ModdleElement} node\n * @param {Array<String>} types\n *\n * @return {Boolean}\n */\nfunction isAny(node, types) {\n  return types.some(function(type) {\n    return is(node, type);\n  });\n}\n\nexport { is, isAny };\n//# sourceMappingURL=index.esm.js.map\n","/**\n * Flatten array, one level deep.\n *\n * @template T\n *\n * @param {T[][]} arr\n *\n * @return {T[]}\n */\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nconst nativeToString = Object.prototype.toString;\nconst nativeHasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nfunction isDefined(obj) {\n  return obj !== undefined;\n}\n\nfunction isNil(obj) {\n  return obj == null;\n}\n\nfunction isArray(obj) {\n  return nativeToString.call(obj) === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return nativeToString.call(obj) === '[object Object]';\n}\n\nfunction isNumber(obj) {\n  return nativeToString.call(obj) === '[object Number]';\n}\n\n/**\n * @param {any} obj\n *\n * @return {boolean}\n */\nfunction isFunction(obj) {\n  const tag = nativeToString.call(obj);\n\n  return (\n    tag === '[object Function]' ||\n    tag === '[object AsyncFunction]' ||\n    tag === '[object GeneratorFunction]' ||\n    tag === '[object AsyncGeneratorFunction]' ||\n    tag === '[object Proxy]'\n  );\n}\n\nfunction isString(obj) {\n  return nativeToString.call(obj) === '[object String]';\n}\n\n\n/**\n * Ensure collection is an array.\n *\n * @param {Object} obj\n */\nfunction ensureArray(obj) {\n\n  if (isArray(obj)) {\n    return;\n  }\n\n  throw new Error('must supply array');\n}\n\n/**\n * Return true, if target owns a property with the given key.\n *\n * @param {Object} target\n * @param {String} key\n *\n * @return {Boolean}\n */\nfunction has(target, key) {\n  return nativeHasOwnProperty.call(target, key);\n}\n\n/**\n * @template T\n * @typedef { (\n *   ((e: T) => boolean) |\n *   ((e: T, idx: number) => boolean) |\n *   ((e: T, key: string) => boolean) |\n *   string |\n *   number\n * ) } Matcher\n */\n\n/**\n * @template T\n * @template U\n *\n * @typedef { (\n *   ((e: T) => U) | string | number\n * ) } Extractor\n */\n\n\n/**\n * @template T\n * @typedef { (val: T, key: any) => boolean } MatchFn\n */\n\n/**\n * @template T\n * @typedef { T[] } ArrayCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: string]: T } } StringKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { { [key: number]: T } } NumberKeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { StringKeyValueCollection<T> | NumberKeyValueCollection<T> } KeyValueCollection\n */\n\n/**\n * @template T\n * @typedef { KeyValueCollection<T> | ArrayCollection<T> } Collection\n */\n\n/**\n * Find element in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {Object}\n */\nfunction find(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let match;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      match = val;\n\n      return false;\n    }\n  });\n\n  return match;\n\n}\n\n\n/**\n * Find element index in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {number}\n */\nfunction findIndex(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let idx = isArray(collection) ? -1 : undefined;\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      idx = key;\n\n      return false;\n    }\n  });\n\n  return idx;\n}\n\n\n/**\n * Filter elements in collection.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param {Matcher<T>} matcher\n *\n * @return {T[]} result\n */\nfunction filter(collection, matcher) {\n\n  const matchFn = toMatcher(matcher);\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    if (matchFn(val, key)) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\n\n/**\n * Iterate over collection; returning something\n * (non-undefined) will stop iteration.\n *\n * @template T\n * @param {Collection<T>} collection\n * @param { ((item: T, idx: number) => (boolean|void)) | ((item: T, key: string) => (boolean|void)) } iterator\n *\n * @return {T} return result that stopped the iteration\n */\nfunction forEach(collection, iterator) {\n\n  let val,\n      result;\n\n  if (isUndefined(collection)) {\n    return;\n  }\n\n  const convertKey = isArray(collection) ? toNum : identity;\n\n  for (let key in collection) {\n\n    if (has(collection, key)) {\n      val = collection[key];\n\n      result = iterator(val, convertKey(key));\n\n      if (result === false) {\n        return val;\n      }\n    }\n  }\n}\n\n/**\n * Return collection without element.\n *\n * @template T\n * @param {ArrayCollection<T>} arr\n * @param {Matcher<T>} matcher\n *\n * @return {T[]}\n */\nfunction without(arr, matcher) {\n\n  if (isUndefined(arr)) {\n    return [];\n  }\n\n  ensureArray(arr);\n\n  const matchFn = toMatcher(matcher);\n\n  return arr.filter(function(el, idx) {\n    return !matchFn(el, idx);\n  });\n\n}\n\n\n/**\n * Reduce collection, returning a single result.\n *\n * @template T\n * @template V\n *\n * @param {Collection<T>} collection\n * @param {(result: V, entry: T, index: any) => V} iterator\n * @param {V} result\n *\n * @return {V} result returned from last iterator\n */\nfunction reduce(collection, iterator, result) {\n\n  forEach(collection, function(value, idx) {\n    result = iterator(result, value, idx);\n  });\n\n  return result;\n}\n\n\n/**\n * Return true if every element in the collection\n * matches the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction every(collection, matcher) {\n\n  return !!reduce(collection, function(matches, val, key) {\n    return matches && matcher(val, key);\n  }, true);\n}\n\n\n/**\n * Return true if some elements in the collection\n * match the criteria.\n *\n * @param  {Object|Array} collection\n * @param  {Function} matcher\n *\n * @return {Boolean}\n */\nfunction some(collection, matcher) {\n\n  return !!find(collection, matcher);\n}\n\n\n/**\n * Transform a collection into another collection\n * by piping each member through the given fn.\n *\n * @param  {Object|Array}   collection\n * @param  {Function} fn\n *\n * @return {Array} transformed collection\n */\nfunction map(collection, fn) {\n\n  let result = [];\n\n  forEach(collection, function(val, key) {\n    result.push(fn(val, key));\n  });\n\n  return result;\n}\n\n\n/**\n * Get the collections keys.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction keys(collection) {\n  return collection && Object.keys(collection) || [];\n}\n\n\n/**\n * Shorthand for `keys(o).length`.\n *\n * @param  {Object|Array} collection\n *\n * @return {Number}\n */\nfunction size(collection) {\n  return keys(collection).length;\n}\n\n\n/**\n * Get the values in the collection.\n *\n * @param  {Object|Array} collection\n *\n * @return {Array}\n */\nfunction values(collection) {\n  return map(collection, (val) => val);\n}\n\n\n/**\n * Group collection members by attribute.\n *\n * @param {Object|Array} collection\n * @param {Extractor} extractor\n *\n * @return {Object} map with { attrValue => [ a, b, c ] }\n */\nfunction groupBy(collection, extractor, grouped = {}) {\n\n  extractor = toExtractor(extractor);\n\n  forEach(collection, function(val) {\n    let discriminator = extractor(val) || '_';\n\n    let group = grouped[discriminator];\n\n    if (!group) {\n      group = grouped[discriminator] = [];\n    }\n\n    group.push(val);\n  });\n\n  return grouped;\n}\n\n\nfunction uniqueBy(extractor, ...collections) {\n\n  extractor = toExtractor(extractor);\n\n  let grouped = {};\n\n  forEach(collections, (c) => groupBy(c, extractor, grouped));\n\n  let result = map(grouped, function(val, key) {\n    return val[0];\n  });\n\n  return result;\n}\n\n\nconst unionBy = uniqueBy;\n\n\n\n/**\n * Sort collection by criteria.\n *\n * @template T\n *\n * @param {Collection<T>} collection\n * @param {Extractor<T, number | string>} extractor\n *\n * @return {Array}\n */\nfunction sortBy(collection, extractor) {\n\n  extractor = toExtractor(extractor);\n\n  let sorted = [];\n\n  forEach(collection, function(value, key) {\n    let disc = extractor(value, key);\n\n    let entry = {\n      d: disc,\n      v: value\n    };\n\n    for (var idx = 0; idx < sorted.length; idx++) {\n      let { d } = sorted[idx];\n\n      if (disc < d) {\n        sorted.splice(idx, 0, entry);\n        return;\n      }\n    }\n\n    // not inserted, append (!)\n    sorted.push(entry);\n  });\n\n  return map(sorted, (e) => e.v);\n}\n\n\n/**\n * Create an object pattern matcher.\n *\n * @example\n *\n * ```javascript\n * const matcher = matchPattern({ id: 1 });\n *\n * let element = find(elements, matcher);\n * ```\n *\n * @template T\n *\n * @param {T} pattern\n *\n * @return { (el: any) =>  boolean } matcherFn\n */\nfunction matchPattern(pattern) {\n\n  return function(el) {\n\n    return every(pattern, function(val, key) {\n      return el[key] === val;\n    });\n\n  };\n}\n\n\n/**\n * @param {string | ((e: any) => any) } extractor\n *\n * @return { (e: any) => any }\n */\nfunction toExtractor(extractor) {\n\n  /**\n   * @satisfies { (e: any) => any }\n   */\n  return isFunction(extractor) ? extractor : (e) => {\n\n    // @ts-ignore: just works\n    return e[extractor];\n  };\n}\n\n\n/**\n * @template T\n * @param {Matcher<T>} matcher\n *\n * @return {MatchFn<T>}\n */\nfunction toMatcher(matcher) {\n  return isFunction(matcher) ? matcher : (e) => {\n    return e === matcher;\n  };\n}\n\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction toNum(arg) {\n  return Number(arg);\n}\n\n/* global setTimeout clearTimeout */\n\n/**\n * @typedef { {\n *   (...args: any[]): any;\n *   flush: () => void;\n *   cancel: () => void;\n * } } DebouncedFunction\n */\n\n/**\n * Debounce fn, calling it only once if the given time\n * elapsed between calls.\n *\n * Lodash-style the function exposes methods to `#clear`\n * and `#flush` to control internal behavior.\n *\n * @param  {Function} fn\n * @param  {Number} timeout\n *\n * @return {DebouncedFunction} debounced function\n */\nfunction debounce(fn, timeout) {\n\n  let timer;\n\n  let lastArgs;\n  let lastThis;\n\n  let lastNow;\n\n  function fire(force) {\n\n    let now = Date.now();\n\n    let scheduledDiff = force ? 0 : (lastNow + timeout) - now;\n\n    if (scheduledDiff > 0) {\n      return schedule(scheduledDiff);\n    }\n\n    fn.apply(lastThis, lastArgs);\n\n    clear();\n  }\n\n  function schedule(timeout) {\n    timer = setTimeout(fire, timeout);\n  }\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = lastNow = lastArgs = lastThis = undefined;\n  }\n\n  function flush() {\n    if (timer) {\n      fire(true);\n    }\n\n    clear();\n  }\n\n  /**\n   * @type { DebouncedFunction }\n   */\n  function callback(...args) {\n    lastNow = Date.now();\n\n    lastArgs = args;\n    lastThis = this;\n\n    // ensure an execution is scheduled\n    if (!timer) {\n      schedule(timeout);\n    }\n  }\n\n  callback.flush = flush;\n  callback.cancel = clear;\n\n  return callback;\n}\n\n/**\n * Throttle fn, calling at most once\n * in the given interval.\n *\n * @param  {Function} fn\n * @param  {Number} interval\n *\n * @return {Function} throttled function\n */\nfunction throttle(fn, interval) {\n  let throttling = false;\n\n  return function(...args) {\n\n    if (throttling) {\n      return;\n    }\n\n    fn(...args);\n    throttling = true;\n\n    setTimeout(() => {\n      throttling = false;\n    }, interval);\n  };\n}\n\n/**\n * Bind function against target <this>.\n *\n * @param  {Function} fn\n * @param  {Object}   target\n *\n * @return {Function} bound function\n */\nfunction bind(fn, target) {\n  return fn.bind(target);\n}\n\n/**\n * Convenience wrapper for `Object.assign`.\n *\n * @param {Object} target\n * @param {...Object} others\n *\n * @return {Object} the target\n */\nfunction assign(target, ...others) {\n  return Object.assign(target, ...others);\n}\n\n/**\n * Sets a nested property of a given object to the specified value.\n *\n * This mutates the object and returns it.\n *\n * @template T\n *\n * @param {T} target The target of the set operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} value The value to set.\n *\n * @return {T}\n */\nfunction set(target, path, value) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key, idx) {\n\n    if (typeof key !== 'number' && typeof key !== 'string') {\n      throw new Error('illegal key type: ' + typeof key + '. Key should be of type number or string.');\n    }\n\n    if (key === 'constructor') {\n      throw new Error('illegal key: constructor');\n    }\n\n    if (key === '__proto__') {\n      throw new Error('illegal key: __proto__');\n    }\n\n    let nextKey = path[idx + 1];\n    let nextTarget = currentTarget[key];\n\n    if (isDefined(nextKey) && isNil(nextTarget)) {\n      nextTarget = currentTarget[key] = isNaN(+nextKey) ? {} : [];\n    }\n\n    if (isUndefined(nextKey)) {\n      if (isUndefined(value)) {\n        delete currentTarget[key];\n      } else {\n        currentTarget[key] = value;\n      }\n    } else {\n      currentTarget = nextTarget;\n    }\n  });\n\n  return target;\n}\n\n\n/**\n * Gets a nested property of a given object.\n *\n * @param {Object} target The target of the get operation.\n * @param {(string|number)[]} path The path to the nested value.\n * @param {any} [defaultValue] The value to return if no value exists.\n *\n * @return {any}\n */\nfunction get(target, path, defaultValue) {\n\n  let currentTarget = target;\n\n  forEach(path, function(key) {\n\n    // accessing nil property yields <undefined>\n    if (isNil(currentTarget)) {\n      currentTarget = undefined;\n\n      return false;\n    }\n\n    currentTarget = currentTarget[key];\n  });\n\n  return isUndefined(currentTarget) ? defaultValue : currentTarget;\n}\n\n/**\n * Pick properties from the given target.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return Pick<T, V>\n */\nfunction pick(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(properties, function(prop) {\n\n    if (prop in obj) {\n      result[prop] = target[prop];\n    }\n  });\n\n  return result;\n}\n\n/**\n * Pick all target properties, excluding the given ones.\n *\n * @template T\n * @template {any[]} V\n *\n * @param {T} target\n * @param {V} properties\n *\n * @return {Omit<T, V>} target\n */\nfunction omit(target, properties) {\n\n  let result = {};\n\n  let obj = Object(target);\n\n  forEach(obj, function(prop, key) {\n\n    if (properties.indexOf(key) === -1) {\n      result[key] = prop;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Recursively merge `...sources` into given target.\n *\n * Does support merging objects; does not support merging arrays.\n *\n * @param {Object} target\n * @param {...Object} sources\n *\n * @return {Object} the target\n */\nfunction merge(target, ...sources) {\n\n  if (!sources.length) {\n    return target;\n  }\n\n  forEach(sources, function(source) {\n\n    // skip non-obj sources, i.e. null\n    if (!source || !isObject(source)) {\n      return;\n    }\n\n    forEach(source, function(sourceVal, key) {\n\n      if (key === '__proto__') {\n        return;\n      }\n\n      let targetVal = target[key];\n\n      if (isObject(sourceVal)) {\n\n        if (!isObject(targetVal)) {\n\n          // override target[key] with object\n          targetVal = {};\n        }\n\n        target[key] = merge(targetVal, sourceVal);\n      } else {\n        target[key] = sourceVal;\n      }\n\n    });\n  });\n\n  return target;\n}\n\nexport { assign, bind, debounce, ensureArray, every, filter, find, findIndex, flatten, forEach, get, groupBy, has, isArray, isDefined, isFunction, isNil, isNumber, isObject, isString, isUndefined, keys, map, matchPattern, merge, omit, pick, reduce, set, size, some, sortBy, throttle, unionBy, uniqueBy, values, without };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerClientPlugin } from 'camunda-modeler-plugin-helpers';\r\n\r\nimport { config, resolver } from '../.bpmnlintrc';\r\n\r\n// provide { config, resolver } as a `lintRules.${tabType}` plug-in\r\nregisterClientPlugin({ config, resolver }, 'lintRules.cloud-bpmn');\r\nregisterClientPlugin({ config, resolver }, 'lintRules.bpmn');\r\n"],"names":[],"sourceRoot":""}